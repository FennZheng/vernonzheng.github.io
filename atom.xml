<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[vernonzheng blog]]></title>
  <subtitle><![CDATA[to be better]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://vernonzheng.com/"/>
  <updated>2014-12-18T03:05:16.391Z</updated>
  <id>http://vernonzheng.com/</id>
  
  <author>
    <name><![CDATA[Vernon Zheng]]></name>
    <email><![CDATA[kevonzheng@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[没耐心的nodejs教程-基础篇]]></title>
    <link href="http://vernonzheng.com/2014/12/17/%E6%B2%A1%E8%80%90%E5%BF%83%E7%9A%84nodejs%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://vernonzheng.com/2014/12/17/没耐心的nodejs教程-基础篇/</id>
    <published>2014-12-17T15:21:00.000Z</published>
    <updated>2014-12-18T03:02:41.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇没耐心的nodejs教程，写给希望迅速上手的学习者。基础篇介绍权限，模块，包，工程目录结构，npm等。</p>
<h2 id="一、权限问题">一、权限问题</h2>
<p>linux下，nodejs需要监听80或443端口提供HTTP（S）服务时需要root权限。<br>有两种方式：</p>
<ul>
<li>（1）（推荐）需要js提供root权限<blockquote>
<p>$ sudo node server.js</p>
</blockquote>
</li>
<li>（2）使用chmod+s命令让nodejs总是以root权限运行，不安全。<blockquote>
<p>$ sudo chown root /usr/local/bin/node<br>$ sudo chmod +s /usr/local/bin/node</p>
</blockquote>
</li>
</ul>
<h2 id="二、模块">二、模块</h2>
<p>一个文件为一个模块，一个文件路径为一个模块名。<br>编写模块时，有require，exports，module三个变量。</p>
<ul>
<li><strong>2.1 required</strong><br>导入某个模块<blockquote>
<p>var foo1 = required(‘./foo’);//.js后缀可以省略<br>var foo2 = required(“./foo.js”);</p>
</blockquote>
</li>
</ul>
<p>也可以加载或者导入一个json：</p>
<blockquote>
<p>var data = require(‘./data.json’);</p>
</blockquote>
<ul>
<li><p><strong>2.2 exports</strong><br>是当前模块的导出对象，用于导出模块共有方式和属性。</p>
<blockquote>
<p>exports.hello = function(){</p>
<pre><code>console.<span class="built_in">log</span>(‘Hello World!’);
</code></pre><p>};</p>
</blockquote>
</li>
<li><p><strong>2.3 module</strong><br>可以访问当前模块的一些信息，最多的用途就是替换当前模块的到处对象。</p>
<blockquote>
<p>module.export = function(){</p>
<pre><code>console.<span class="built_in">log</span>(‘Hello World!’);
</code></pre><p>};</p>
</blockquote>
</li>
</ul>
<h2 id="三、模块初始化">三、模块初始化</h2>
<p>NodeJS使用CMD模块系统，主模块作为程序入口点，所有模块在执行过程中只初始化一次。</p>
<p><strong>初始化一次</strong></p>
<p>一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。</p>
<ul>
<li><p><strong>3.1 主模块</strong><br>通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其他模块完成工作。默认是路径下的main.js。</p>
</li>
<li><p><strong>3.2 二进制模块（不推荐）</strong><br>nodejs支持使用c/c++编写二进制模块。编译好的二进制模块除了文件扩展名是.node外，和JS块的使用方式相同。</p>
</li>
</ul>
<h2 id="四、模块路径解析规则">四、模块路径解析规则</h2>
<p>除了相对路径和绝对路径外，require函数还支持第三种形式的路径。</p>
<ul>
<li><p><strong>4.1 内置模块</strong></p>
</li>
<li><p><strong>4.2 node_modules目录</strong><br>专门存放模块的路径。比如某个模块的绝对路径是/home/user/hello.js, 在该模块中使用require(‘foo/bar’)方式加载模块，则NodeJS依次尝试使用以下路径。</p>
<blockquote>
<p>/home/user/node_modules/foo/bar<br>/home/node_modules/foo/bar<br>/node_moduels/foo/bar</p>
</blockquote>
</li>
<li><p><strong>4.3 NODE_PATH环境变量</strong><br>指定额外的模块搜索路径。因为是额外，所以最后搜索。<br>使用：设置NODE_PATH环境变量，linux用：分隔，windows使用；分隔。</p>
</li>
</ul>
<h2 id="五、包">五、包</h2>
<ul>
<li><p><strong>5.1 入口模块</strong><br>多个js模块，组成一个包。所有模块都是同一个路径里，且需要指定一个入口模块，入口模块的导出对象作为包的导出对象。<br>比如cat目录下有main.js,lib1.js,lib2.js。<br>main.js作为入口模块，require lib1.js,lib2.js。</p>
</li>
<li><p><strong>5.2 index.js</strong><br>当模块文件名为index.js,加载模块时就可以使用模块所在目录的路径代替模块文件路径，如可写成<br>var cat = require(‘/home/user/lib/cat’);<br>var cat = require(‘/home/user/lib/cat/index’);</p>
</li>
<li><p><strong>5.3 自定义入口模块和存放位置（package.json）</strong><br>如果你想自定义入口模块的文件名和存放位置，就需要在包目录下包含一个package.json文件，如</p>
<blockquote>
<p>{</p>
<pre><code>“name”: “cat”,
“main”: “./lib/main.js<span class="string">"</span>
</code></pre><p>}<br>如此一来，就可以用require(‘/home/user/lib/cat’)加载。</p>
</blockquote>
</li>
</ul>
<h2 id="六、命令行程序">六、命令行程序</h2>
<p>将固定node命令开头执行的方式，变成命令行的方式。<br>node xx.js [param] =&gt; xx [param]，<br>如$node /home/user/bin/node-echo.js Hello World<br>变成<br>$node-echo Hello World<br>简便很多</p>
<p>那么如何做到，只讲在linux下怎么做：</p>
<ul>
<li>(1)node-echo.js顶部增加<blockquote>
<p>#!/usr/bin/env node</p>
</blockquote>
</li>
<li>(2)然后增加执行权限，并再/usr/local/bin下创建软链接<blockquote>
<p>$ chmod +x /home/user/bin/node-echo.js<br>$ sudo ln -s /home/user/bin/node-echo.js /usr/local/bin/node-echo</p>
</blockquote>
</li>
</ul>
<h2 id="七、工程目录结构">七、工程目录结构</h2>
<blockquote>
<ul>
<li>/home/user/workspace/node-echo/<ul>
<li>bin/<br>  node-echo</li>
</ul>
<ul>
<li>doc/</li>
</ul>
<ul>
<li>lib/<br>  echo.js</li>
<li>node_modules/<ul>
<li>argv/</li>
</ul>
</li>
</ul>
<ul>
<li>tests/<br>package.json<br>README.md</li>
</ul>
</li>
</ul>
</blockquote>
<p>其中部分文件：</p>
<blockquote>
<p>/<em> bin/node-echo </em>/<br>var argv = require(‘argue’),<br>     echo = require(‘../ilb/echo’);<br>console.log(echo(argv.join(‘ ‘)));</p>
<p>/<em> lib/echo.js</em>/<br>module.exports = function(message){<br>    return message;<br>}</p>
<p>/<em> pacakge.json </em>/<br>{<br>    “name”:”node-echo”,<br>    “main”:”./lib/echo.js”<br>}</p>
</blockquote>
<h2 id="八、NPM:包管理工具">八、NPM:包管理工具</h2>
<p>（1）允许用户从NPM服务器下载别人编写的三方包到本地使用。<br>（2）允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>（3）允许用户将自己编写的包或者命令行程序上传到NPM服务器供别人使用。</p>
<ul>
<li><strong>8.1 下载第三方包</strong></li>
</ul>
<p>一般这样使用别人的包(如argv)，<br>在项目目录下，npm install argv@1.1.1，那么argv包就会放到node_modules目录下，直接require(‘argv’)就可以使用了。</p>
<p>依赖的包比较多时，通过package.json字段做了扩展。<br>如：<br>{<br>    “name”: “node-echo”,<br>    “main”: “./lib/echo.js”,<br>    “denpendencies”:{<br>        “argv”: “0.0.2”<br>    }<br>}<br>然后在工程目录，npm install即可。btw，传递的依赖会被自动下载。</p>
<ul>
<li><strong>8.2 安装命令行工具</strong></li>
</ul>
<p>如上面例子的node-echo，只要node-echo自己配置好了对应的package.json字段，对于用户而言，这样安装：</p>
<blockquote>
<p>$ npm install node-echo -g<br>其中-g表示全局安装，node-echo会默认安装到以下位置，并且NPM会自动创建好Linux系统下需要的软链文件。</p>
<ul>
<li>/usr/local/<ul>
<li>lib/node_modules/<ul>
<li>node-echo/<br>…</li>
</ul>
</li>
<li>bin/<br>  node-echo<br>…</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><strong>8.3 发布代码</strong></li>
</ul>
<p>第一次发布npm，需要注册个号码。执行npm adduser，按提示操作。账号完成设置后，编辑需要发布的项目的package.json，加入npm必须字段。<br>如：</p>
<blockquote>
<p>{<br>   “name”: ”node-echo”，#包名，与NPM服务器保持唯一<br>   “version”： “1.0.0”，#当前版本号<br>   “dependencies”：{<br>       “argv”： “0.0.2”<br>   }，<br>   “main”： “./lib/echo.js”,<br>   “bin”: {<br>       “node-echo”: “./bin/node-echo”  #命令行程序名和主模块位置<br>   }<br>}<br>然后，在package.json所在目录下运行npm publish 发布代码。</p>
</blockquote>
<ul>
<li><strong>8.4 版本号</strong></li>
</ul>
<p>使用npm下载或者发布代码都要用到版本号。<br>语义版版本号分为X.Y.Z三位，<br> 分别为主版本号、（大变动，向下不兼容）<br> 次版本号（新增功能，向下兼容）、<br> 补丁版本号（修复bug）。</p>
<h2 id="九、最后npm比较有用的命令行：">九、最后npm比较有用的命令行：</h2>
<ul>
<li>在package.json目录，npm install . -g 可先在本地安装当前命令行程序，用于发布前本地测试。</li>
<li>npm update  <package>当前目录下node_modules子目录下对应模块更新到最新版本。</package></li>
<li>npm update <package> -g 把全局安装的对应命令行程序更新至最新版。</package></li>
<li>npm cache clear 清空NPM本地缓存，用于对于使用相同版本号发布新版本的人。</li>
<li>npm unpublish <package>@<version> 可以撤销自己发布过的某个版本代码。</version></package></li>
</ul>
<hr>
<p>参考：<br>七天学会NodeJS：<a href="http://nqdeng.github.io/7-days-nodejs/\#3.2.1" target="_blank" rel="external">http://nqdeng.github.io/7-days-nodejs/\#3.2.1</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一篇没耐心的nodejs教程，写给希望迅速上手的学习者。基础篇介绍权限，模块，包，工程目录结构，npm等。</p>
<h2 id="一、权限问题">一、权限问题</h2>
<p>linux下，nodejs需要监听80或443端口提供HTTP（S）服务时需要root权限。]]>
    </summary>
    
      <category term="nodejs" scheme="http://vernonzheng.com/tags/nodejs/"/>
    
      <category term="基础" scheme="http://vernonzheng.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="nodejs" scheme="http://vernonzheng.com/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《如何阅读一本书》感悟总结]]></title>
    <link href="http://vernonzheng.com/2014/12/15/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E6%84%9F%E6%82%9F%E6%80%BB%E7%BB%93/"/>
    <id>http://vernonzheng.com/2014/12/15/《如何阅读一本书》感悟总结/</id>
    <published>2014-12-14T16:27:57.000Z</published>
    <updated>2014-12-18T03:05:04.000Z</updated>
    <content type="html"><![CDATA[<pre><code>阅读一本书，就是和作者交流的过程。与直接面对面交流不同，阅读这种“静默”交流方式，需要不同的经验和技巧。刚看完《如何阅读一本书》，感触比较多，总结一下。
</code></pre><p>读书太快或者太慢都会一无所获。要知道什么时候用什么速度阅读很重要。</p>
<p><strong>好的阅读是</strong></p>
<ul>
<li>（1）主动，包括主动的发现问题，思考问题，做一个自我要求的读者<br>（要去理解作者在说什么，为什么这么说，有道理吗，如果有道理怎么运用它等，最后善于做笔记）。</li>
<li>（2）技巧，根据不同的阅读层次和目的，技巧不同，后面讲到。</li>
</ul>
<p><strong>阅读的目的有两种</strong></p>
<p>一种是为获得咨询而读，一种是求得理解而读。<br>两种的技巧不同。<br>（为求得理解而读的一般发生在两种状况下：<br>一是一开始不对等的理解程度<br>二是阅读的人一定要把不对等的理解力克服到一定程度内。）</p>
<p><strong>阅读的层次</strong></p>
<ul>
<li>基础阅读</li>
<li>检视阅读：系统化略读。获得咨询或者消遣停留在这个层次。</li>
<li>分析阅读：特别是在追求理解。</li>
<li>主题阅读：又称比较阅读，根据主题，阅读很多本书，例举出书之间的相关之处，总结。</li>
</ul>
<p><strong>各层次阅读经验</strong></p>
<ul>
<li><p>检视阅读：<br>（1）头一次面对一本难读的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询或者思索。<br>（2）避免“逗留”和“倒退”的坏习惯。</p>
</li>
<li><p>分析阅读：<br>（1）根据顺序和关系，列出全书的重要部分，找出作者在问的问题，或作者想要解决的问题，诠释作者使用的关键字，与作者打成共识，找到论述，然后重构前因后果，明白哪些已解决，哪些未解决。<br>（2）应该为感到困扰的问题停留，而不是感兴趣的细节。</p>
</li>
<li><p>主题阅读：<br>略</p>
</li>
</ul>
<p><strong>各类型书的阅读经验</strong></p>
<ul>
<li><p>实用型书：<br>（1）“任何实用型书都不能解决该书的实际问题”，原文有点绕。。我理解为提出是思维，而非答案，最后做解决方案的还是自己。<br>（2）好的阅读者，读实用型书总能读出言外之意，即衍生出来的规则，他会进一步找出这些规则应该如何应用。<br>（3）评断一本实用型书，所有的事都与结果及目标有关，是否与结果达成共识，而非方法。</p>
</li>
<li><p>想象性文学：<br>（1）论述性文学传达的是知识，而想象性文学传达的是经验。</p>
</li>
<li><p>故事书：<br>（1）快，全心全意的读。</p>
</li>
<li><p>戏剧：<br>（1）你在读剧本时，不是在读一个已经完成的作品。<br>（2）悲剧的精髓在于时间，或者说缺乏时间。</p>
</li>
<li><p>历史类，计算机数学类，哲学类，社科类略。</p>
</li>
</ul>
<p>最后感慨下，多读书，多总结出更适合自己的方式。</p>
<hr>
<p>参考：<br>《如何阅读一本书》：<a href="http://book.douban.com/subject/1013208/" target="_blank" rel="external">http://book.douban.com/subject/1013208/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>阅读一本书，就是和作者交流的过程。与直接面对面交流不同，阅读这种“静默”交流方式，需要不同的经验和技巧。刚看完《如何阅读一本书》，感触比较多，总结一下。
</code></pre><p>读书太快或者太慢都会一无所获。要知道什么时候用什么速度阅读很重要。</p]]>
    </summary>
    
      <category term="阅读方法" scheme="http://vernonzheng.com/tags/%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/"/>
    
      <category term="读书笔记" scheme="http://vernonzheng.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="http://vernonzheng.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux常用命令小记]]></title>
    <link href="http://vernonzheng.com/2014/12/13/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://vernonzheng.com/2014/12/13/Linux常用命令小记/</id>
    <published>2014-12-13T07:13:47.000Z</published>
    <updated>2014-12-18T03:03:23.000Z</updated>
    <content type="html"><![CDATA[<pre><code>最近在翻《Linux命令行与<span class="keyword">shell</span>脚本编程大全》,整理了书中提到的常用的linux命令行。
</code></pre><h2 id="一、文件相关">一、文件相关</h2>
<ul>
<li><p><strong>链接文件</strong><br>cp -l test1 test4 创建硬链接（一个独立文件，引用了源文件，索引节点号是一样的，只适用同一个挂载点下的文件）<br>cp -s test1 test5 创建符号链接，软链接（一个独立文件，只存储源文件的信息，不存储源文件数据，索引节点显示为test5 -&gt; test1）<br>ln 链接文件（硬链接）<br>ln -s 链接文件（软链接）</p>
</li>
<li><p><strong>文件状态</strong><br>stat test10 查看文件统计信息，比ls更全<br>file test1 显示文件类型（3类，文本文件，可执行文件，数据文件）</p>
</li>
<li><p><strong>查看文件内容</strong><br>cat -n test1 查看整个文件，同时显示行号<br>more test1 查看整个文件，显示一页停下来，再向下翻页<br>less test1 more的升级版，不用全部加载文件<br>tail -n 100 -f 显示最后的100行，-f保持活动状态，有新内容就显示<br>head -n 100 -f 与tail类似，显示最开始的100行</p>
</li>
<li><p><strong>文件排序、过滤</strong><br>sort -n 排序文件数据行，-n表示把数字识别为数字，而不是字符，让它们按值排序<br>sort -t ‘:’ -k 3 -n /etc/passwd 其中-t表示指定字段的分隔符，-k指定排序的字段，最终完成按照用户ID进行数字排序<br>grep -e t -e f file1 过滤文件内容，筛选匹配行，其中-e表示多个匹配模式，满足其一就被筛选出来</p>
</li>
<li><p><strong>文件压缩、归档</strong><br>zip -r test.zip test 递归压缩目录<br>unzip test.zip 解压<br>tar -cvf test.tar test/ test2/ 创建含有test和test2目录的test.tar归档文件。<br>tar -tf test.tar 列出test.tar 内容，不解压<br>tar -xvf test.tar 解压<br>tar -zxvf test.tgz 解压gzip压缩过的tar文件</p>
</li>
</ul>
<h2 id="二、线程相关">二、线程相关</h2>
<ul>
<li><p><strong>监控性能</strong><br>top 实时监控进行，系统负载等</p>
</li>
<li><p><strong>线程消息</strong><br>kill -s 信号（线程传递信息，比如HUP（1）挂起，INT（2）终端，QUIT（3）结束运行，KILL（9）无条件终止）</p>
</li>
</ul>
<h2 id="三、账号相关">三、账号相关</h2>
<ul>
<li><strong>组与用户</strong><br>useradd -b default_home -g group sb<br>usermod 修改用户账户的字段，比如主要组以及附加组的所属关系<br>passwd username 修改密码<br>groupadd shared 创建shared新组（tail /etc/group查看结果）<br>usermod -G shared rich 增加shared组的成员，是-G，不是-g，-g会修改账户的默认组！<br>groupmod -n sharing shared 其中-n是修复已有组的组名 -g是修改GID<br>umask 777 —在/etc/profile 设置umask，即touch创建文件时候，默认给的权限<br>chmod o+r newfile (o表示权限设置跟其他用户一样，u表示权限设置为属主一样，g设置为属组一样，r读权限)<br>chown dan.shared newfile 改变文件的属主和属组</li>
</ul>
<h2 id="四、磁盘设备相关">四、磁盘设备相关</h2>
<ul>
<li><p><strong>设备</strong><br>mount -t vfat /dev/sdb1 media/disk 将u盘/dev/sdb1 挂载到/media/disk<br>mount /homr/rich/mnt 卸载</p>
</li>
<li><p><strong>磁盘</strong><br>df -h 显示设备的磁盘空间。<br>du -h 显示特定目录下磁盘使用情况。用来判断系统某个目录是否有超大文件的快速方式。</p>
</li>
</ul>
<hr>
<p>参考：<br>《Linux命令行与shell脚本编程大全》:<a href="http://book.douban.com/subject/11589828/" target="_blank" rel="external">http://book.douban.com/subject/11589828/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>最近在翻《Linux命令行与<span class="keyword">shell</span>脚本编程大全》,整理了书中提到的常用的linux命令行。
</code></pre><h2 id="一、文件相关">一、文件相关</h2>
<ul>
<li><p]]>
    </summary>
    
      <category term="linux" scheme="http://vernonzheng.com/tags/linux/"/>
    
      <category term="命令行" scheme="http://vernonzheng.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="linux" scheme="http://vernonzheng.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Robust Java 中文版》 笔记总结]]></title>
    <link href="http://vernonzheng.com/2014/12/10/%E3%80%8ARobust-Java-%E4%B8%AD%E6%96%87%E7%89%88%E3%80%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://vernonzheng.com/2014/12/10/《Robust-Java-中文版》笔记总结/</id>
    <published>2014-12-10T14:08:49.000Z</published>
    <updated>2014-12-18T03:04:16.000Z</updated>
    <content type="html"><![CDATA[<pre><code><span class="comment">Robust</span> <span class="comment">Java</span> <span class="comment">中文版</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Java异常处理、测试与调试，这本书主要讲解了Java异常</span> <span class="comment">的原理及处理方法，系统地阐述了体系结构、设计、开发、测试和调试等主题，并讨论了如何构建健壮的系统。</span>
</code></pre><h2 id="一、异常基础">一、异常基础</h2>
<p>java异常的产生是代码处，异常会作为消息发送至应用程序的catch部分或者抛出。</p>
<p><strong>1.1 Throwable的内部关系</strong></p>
<p>异常的祖先是Throwable（可抛出），底下是Exception（异常）和Error（错误）<br>Exception异常：为“合理程序程序需要捕获的情况”，可预测，可恢复。<br>Error错误：合理应用程序不应试图捕获它，反常情况。</p>
<p><strong>1.2 可检测异常与非检测异常</strong></p>
<p><strong>区别</strong>：可检测异常经编译器验证，而非检测异常不需要。<br>主要的非检测异常：RuntimeException和Error。（对于RuntimeException，一般针对特定操作，请增加校验。）</p>
<p><strong>1.3 Trowable的属性</strong></p>
<p>Throwable 存储3个属性：</p>
<ul>
<li>message（消息）：String //描述性文本 读（只能在构造函数设置）</li>
<li>stack trace（栈跟踪）：StackTraceElement[] //引发异常的所有方法调用的记录 读-写</li>
<li>cause（原因）：Trowable //产生此异常的原因 读-写（只能设置一次） getCause和initCause获取和设置，或者构造函数设置</li>
</ul>
<p>除3个属性外，Throwable还包含toString和getLocalizedMessage 方法。<br>toString方法：覆盖Object类，返回异常名（对于非空消息字符串）。<br>getLocalizedMessge方法：返回消息字符串的值。</p>
<h2 id="二、异常的实践">二、异常的实践</h2>
<p><strong>2.1 处理还是声明异常</strong></p>
<p><strong>经验法则</strong>：尽可能去处理异常，如果没有能力处理就声明异常。<br>从本质上讲，仅当方法缺少自我处理异常的信息、上下文或资源时，才将异常信息传给调用者。</p>
<h2 id="三、异常高级特性">三、异常高级特性</h2>
<p><strong>3.1 链表异常</strong></p>
<p>就是异常允许设置两个异常之间的关联，称为链表异常。参考1.3里的cause属性。<br>设置方法有两种，作为构造函数参数传入，或者调用initCause(Throwable)方法设置，只能设置一次。</p>
<p>一般不常用，处理链表异常的方式可以参考如下：</p>
<blockquote>
<p>try{<br>    throublesomeObject.riskyMethod();<br>}catch(ChainedException exc){<br>    System.out.println(“We’re in trouble now!!!”);<br>    Throwable currentException = exc;<br>    do{<br>         System.out.println(currentException.toString());<br>         currentException = currentException.getCause();<br>    }while(currentException != null)<br>}</p>
</blockquote>
<p><strong>3.2 异常的本地化和国际化</strong></p>
<p>如果需要本地化异常相关文本，可在自定义异常中覆盖getLocalizedMessage(),以加载本地专用的异常信息。</p>
<p>java使用java.util和java.text包的类支持110n和i18n.java.util.resourceBundle和java.util.Locale是两个关键类。</p>
<p>实现步骤为：</p>
<ul>
<li>创建ResourceBundle子类来存储消息</li>
<li>为不同地区继承ResourceBundle类</li>
<li>创建覆盖getLocalizedMessage的自定义异常类并用ResourceBundle检索消息</li>
<li>具体大家自己查下吧，就不贴代码了。</li>
</ul>
<p><strong>3.3 不声明异常，声明异常，try-catch处理异常的性能比较</strong></p>
<p>有兴趣的可以自己写个测试类，javap -c -verbose一下。</p>
<p>可以看到：<br>声明异常和不声明的两个方法字节码相同，声明异常的抛出语句在类的方法查找表中声明。<br>而内部try-catch的方法，会增加一些如goto， astore等的字节码指令，以及一个与该方法相关的异常表（Exception table）。若产生异常，异常表控制代码路由。实际上行为与前两者类似。</p>
<p>那么这三者的性能比较会怎样？<strong>实际测试是区别不明显</strong>。</p>
<p>总结下<strong>最佳实践</strong>：<br>尽量避免抛出异常。<br>如果条件允许就处理异常。<br>如果条件不允许就声明异常。</p>
<h2 id="四、异常与多线程">四、异常与多线程</h2>
<p><strong>4.1 多线程与异常的关系</strong></p>
<p>看run方法签名，知道线程的异常都必须内部处理。<br>当run方法抛出非检测异常（RuntimeException或Error）时，负责该执行路径的Thread将终止，而其他线程无感知，理想情况下，多线程不抛出受检或非受检异常。</p>
<p><strong>关于dumpstack</strong>：</p>
<p>多线程程序中，每个线程都有自己的执行路径，也有自己的栈跟踪。要分析Thread的栈跟踪，调用Thread类的dumpStack方法，将其显示在标准错误流中（System.err)。<br>如果正常运行时执行该操作，显示Thread在其调用栈的当前位置。<br>如果产生异常，则显示标准异常栈跟踪。</p>
<p><strong>4.2 同步代码块中的异常</strong></p>
<p>比较正确的写法：除非保证不损坏同步块，决不抛出传到同步块意外的异常：</p>
<blockquote>
<p>try{<br>    synchronized(this){<br>    }<br>}catch(RuntimeException exc){</p>
<p>}</p>
</blockquote>
<h2 id="五、异常设计的最佳实践">五、异常设计的最佳实践</h2>
<ul>
<li>（1）在应用程序中，可根据潜在故障集来描述各个用例。可根据在运行程序中出现的可能性及严重程度，按层次定义这些故障。</li>
<li>（2）只解决对程序有重大影响且不可避免的问题和错误。</li>
<li>（3）方法只传递程序中需要广而告之的错误，或传递因为方法缺少上下文或资源而无法解决的错误。</li>
<li>（4）方法应根据使用者的角色和职责，以使用者可轻易理解的方式传递错误。</li>
<li>（5）方法仅在以下情况下抛出多个异常：<br>a.互相排斥（起因不同）<br>b.对使用者有不同作用<br>c.表示完全不同的故障</li>
<li>（6）在任何软件实体中（类、组件、系统、架构或API），异常都应称为实体合约（实体与外部的接口）的标准部分。</li>
</ul>
<h2 id="六、测试技术体系">六、测试技术体系</h2>
<p><strong>6.1 测试角色和职责</strong></p>
<ul>
<li>6.1.1 开发人员（TDD适合开发人员的单元测试，集成测试）<br>白盒：静态和动态测试，包括单元，集成，烟雾（smoke）和回归测试<br>体系结构：大多数测试形式，但有效性测试最好由用户来执行</li>
<li>6.1.2 测试人员<br>黑盒：大多数测试形式，特别是探索和基于风险的测试<br>系统结构：大多数测试形式</li>
<li>6.1.3 用户<br>黑盒：alpha，beta和用户满意度测试<br>体系结构：有效性测试</li>
</ul>
<h2 id="七、调试技术体系">七、调试技术体系</h2>
<p><strong>低级：code-resident技术</strong></p>
<ul>
<li>日志记录API</li>
<li>异常和错误</li>
<li>专用测试方法</li>
</ul>
<p><strong>中级：模式和架构技术</strong></p>
<ul>
<li>收集器（被动数据收集）</li>
<li>监控器（被动数据监控）</li>
<li>模仿器（主动被调用行为）</li>
<li>模拟器（主动调用行为）</li>
</ul>
<p><strong>高级：系统技术</strong></p>
<ul>
<li>体系结构测试方法和架构</li>
<li>基础结构收集方法</li>
<li>JPDA（java平台调试器体系结构）</li>
</ul>
<hr>
<p>参考：</p>
<ul>
<li>《Robust Java 中文版》:<a href="http://book.douban.com/subject/1681498/" target="_blank" rel="external">http://book.douban.com/subject/1681498/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code><span class="comment">Robust</span> <span class="comment">Java</span> <span class="comment">中文版</span><span class="literal">-</sp]]>
    </summary>
    
      <category term="读书笔记" scheme="http://vernonzheng.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="http://vernonzheng.com/tags/java/"/>
    
      <category term="读书笔记" scheme="http://vernonzheng.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux环境变量解疑]]></title>
    <link href="http://vernonzheng.com/2014/12/06/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%A7%A3%E7%96%91/"/>
    <id>http://vernonzheng.com/2014/12/06/Linux环境变量解疑/</id>
    <published>2014-12-06T09:02:59.000Z</published>
    <updated>2014-12-18T03:03:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一、什么是环境变量">一、什么是环境变量</h2>
<pre><code>bash <span class="keyword">shell</span>用一个称为环境变量的特性来存储有关<span class="keyword">shell</span>会话和工作环境的信息。
</code></pre><p>环境变量有两类：<strong>全局变量</strong>和<strong>局部变量</strong>。<br>局部变量可以在这个shell进程和子进程中起作用，另创建一个shell，就无效了。</p>
<p><strong>1.1 显示环境变量</strong></p>
<ul>
<li>显示全局变量：printenv</li>
<li>显示局部变量：set</li>
</ul>
<p><strong>1.2 设置环境变量</strong></p>
<ul>
<li>设置局部变量：通过等号来给环境变量赋值，如</li>
</ul>
<blockquote>
<p>$test=testing<br>$echo $test<br>testing<br>$</p>
</blockquote>
<ul>
<li>设置全局变量：通过将局部变量导出为全局变量的方式，如</li>
</ul>
<blockquote>
<p>$echo $test<br>testing a long string<br>$export test<br>$bash<br>$echo $test<br>testing a long string<br>$</p>
</blockquote>
<p><strong>1.3 删除环境变量</strong></p>
<ul>
<li>局部变量：unset test</li>
<li>全局变量：unset test 需要注意的是：如果你是在子进程中删除一个全局环境变量，它只对子进程失效。全局环境变量在父进程仍然有效。</li>
</ul>
<h2 id="二、系统环境变量">二、系统环境变量</h2>
<p>linux启动启动一个bash shell时，默认情况下bash在几个文件中查找命令。这些文件称为启动文件，<strong>根据bash shell启动方式的不同，查找文件不同</strong>。</p>
<p>bash shell有三种方式：</p>
<h3 id="2-1_登陆时当做默认登陆shell">2.1 登陆时当做默认登陆shell</h3>
<p>会依次查找一下路径：</p>
<ul>
<li>/etc/profile</li>
<li>$HOME/.bash_profile</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p><strong>/etc/profile</strong>文件是系统上默认的bash shell的主启动文件。每个用户登陆都会执行这个启动文件，另外3个启动文件是用户专有的，可根据用户定制。</p>
<h3 id="2-2_作为非登陆shell的交互式shell">2.2 作为非登陆shell的交互式shell</h3>
<p>如果你的bash shell不是登陆系统时启动的，称为交互式shell。</p>
<p>交互式shell不会去访问/etc/profile文件，而会去用户的HOME目录检查<strong>.bashrc</strong>是否存在。</p>
<p><strong>.bashrc文件的作用</strong>：<br>有两个作用：</p>
<ul>
<li>一是查看/etc目录下的公用bashrc文件</li>
<li>二是为用户提供一个定制自己的命令别名和私有脚本函数的地方。<br>（默认的文件会设置一些环境变量，但一般它没有执行export命令让它们称为全局的。）</li>
</ul>
<p>记住，交互式shell的启动文件只会在每次有新的交互式shell启动时才运行，因此任何子shell都会自动执行这个交互式shell的启动文件。</p>
<p>还能看出，/etc/bashrc文件也会执行位于/etc/profile.d 目录下的那些应用专属的启动文件。</p>
<h3 id="2-3_作为运行脚本的非交互shell">2.3 作为运行脚本的非交互shell</h3>
<p>系统执行shell脚本时用的就是这种shell。</p>
<p>当你每次在系统上运行脚本时需要运行特定的启动命令。为了处理这种情况，bash shell提供了BASH_ENV环境变量。</p>
<p>当shell启动一个非交互式shell进程时，它会检查这个环境变量来查看要执行的启动文件。如果有指定，shell会执行文件里的命令。<br>（在linux发行版里，默认情况下这个环境变量并未设置。）</p>
<hr>
<p>参考：</p>
<ul>
<li>《Linux命令行与shell脚本编程大全》:<a href="http://book.douban.com/subject/11589828/" target="_blank" rel="external">http://book.douban.com/subject/11589828/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一、什么是环境变量">一、什么是环境变量</h2>
<pre><code>bash <span class="keyword">shell</span>用一个称为环境变量的特性来存储有关<span class="keyword">shell</span>会话和工作]]>
    </summary>
    
      <category term="linux" scheme="http://vernonzheng.com/tags/linux/"/>
    
      <category term="环境变量" scheme="http://vernonzheng.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="linux" scheme="http://vernonzheng.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://vernonzheng.com/2014/12/01/hello-world/"/>
    <id>http://vernonzheng.com/2014/12/01/hello-world/</id>
    <published>2014-12-01T07:13:47.000Z</published>
    <updated>2014-12-18T02:47:14.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
